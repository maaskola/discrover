
Instructions to build the code
==============================

The code contained in this package is built in four steps.

1. Configure the CMake build script
2. Execute the CMake build script
3. Compile the source code
4. Link and install the binary file




1. Configure the CMake build script


Open the file CMakeLists.txt in the root directory of the source code tree,
and change the following line to match your system.

SET(LOCAL_PREFIX "~/local")
SET(CMAKE_INSTALL_PREFIX ${LOCAL_PREFIX})
SET(CMAKE_PREFIX_PATH ${LOCAL_PREFIX})

Explanation:

The variable CMAKE_INSTALL_PREFIX determines where the software will be
installed after buidling. In particular, programs will be installed in
${CMAKE_INSTALL_PREFIX}/bin and libraries in ${CMAKE_INSTALL_PREFIX}/lib.
The variable CMAKE_PREFIX_PATH has to be set such that the required dependencies
may be found. In particular, the headers of Boost need to be found in
${CMAKE_PREFIX_PATH}/include, if not installed in a standard system directory
like /usr/include.
Similarly, the directory ${CMAKE_PREFIX_PATH}/lib tells CMake where to find
the Boost libraries if they are not installed in a standard system directory.


After this variable has been adapted to your system, you may proceed with
the next step.





2. Execute the CMake build script


Change to the root directory of the package and execute

cmake .


Explanation:
This will search for the paths to the required headers and libraries, create a
directory called build and prepare everything for the subsequent compilation.
It will also check if your compiler supports the required features (C++11
and OpenMP support).

If anything fails at this step please have a look at CMakeLists.txt and see if
some of the commented-out statements may help you. If difficulties persists,
please contact the author of this software.





3. Compile the source code


Execute from the package's root directory

make


Explanation:
This will compile the source code. You may make use of parallel building by running

make -j N

where N is the number of CPUs that you want to use.




4. Link and install the binary file


While still in the root directory of this package, execute

make install


Explanation:
This will copy the libraries and binaries into the place that you specified in the
CMakeLists.txt file in step 1.
If this location is part of your $PATH and $LD_LIBRARY_PATH environment variables
you can then run the hmm library from anywhere. Try it out! Execute

hmm -h

This should present you the help information of the program.



Have fun with it!



