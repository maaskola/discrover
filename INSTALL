
Instructions to build the code
==============================

The code contained in this package is built in four steps.

0. Optional: Edit the CMake build script
1. Execute the CMake build script
2. Compile the source code
3. Link and install the binary file




0. Optional: Edit the CMake build script


The file CMakeLists.txt in the root directory of the source code tree contains
the instructions to configure and build dlhmm.
Among other things, you can set the target installation directory in it.
To do this, find the following lines, and modify them to your liking.

SET(LOCAL_PREFIX "~/local")
SET(CMAKE_INSTALL_PREFIX ${LOCAL_PREFIX})
SET(CMAKE_PREFIX_PATH ${LOCAL_PREFIX})

Explanation:

The variable CMAKE_INSTALL_PREFIX determines where the software will be
installed after buidling. In particular, programs will be installed in
${CMAKE_INSTALL_PREFIX}/bin and libraries in ${CMAKE_INSTALL_PREFIX}/lib.
The variable CMAKE_PREFIX_PATH has to be set such that the required dependencies
may be found. In particular, the headers of Boost need to be found in
${CMAKE_PREFIX_PATH}/include, if not installed in a standard system directory
like /usr/include.
Similarly, the directory ${CMAKE_PREFIX_PATH}/lib tells CMake where to find
the Boost libraries if they are not installed in a standard system directory.

By default, both CMAKE_INSTALL_PREFIX and CMAKE_PREFIX_PATH are constructed from
LOCAL_PREFIX, hence setting only LOCAL_PREFIX to match your system is the only
change required in most cases.


After this variable has been adapted to your system, you may proceed with
the next step.





1. Execute the CMake build script


Change to the root directory of the package and execute

cmake .

Alternatively, you can execute

cmake -DCMAKE_INSTALL_PREFIX:PATH=/desired/installation/path .

where you would replace /desired/installation/path by the path to which you
to install the package. Note that you would have to issue this every time you
configure the package, so it may be preferable to set this permanently as
described in step 0 above.


Explanation:
This will search for the paths to the required headers and libraries, create a
directory called build and prepare everything for the subsequent compilation.
It will also check if your compiler supports the required features (C++11
and OpenMP support).

If anything fails at this step please have a look at CMakeLists.txt and see if
some of the commented-out statements may help you. If difficulties persists,
please contact the author of this software.





2. Compile the source code


Execute from the package's root directory

make


Explanation:
This will compile the source code. You may make use of parallel building by
running

make -j N

where N is the number of CPUs that you want to use.




3. Link and install the binary file


While still in the root directory of this package, execute

make install


Explanation:
This will copy the libraries and binaries into the default installation path,
which is /usr/local/bin, /usr/local/lib, and /usr/local/share/doc if you did
not specify otherwise via CMakeLists.txt in step 0, or via the command line in
step 1.

If these locations are part of your $PATH and $LD_LIBRARY_PATH environment
variables you can then simply run the dlhmm program from anywhere.

Otherwise, you might still have to add the directories you installed to to $PATH
and $LD_LIBRARY_PATH. This can be done with a command like

export PATH=HERE/bin:$PATH
export LD_LIBRARY_PATH=HERE/lib:$LD_LIBRARY_PATH

where HERE will have to be the path that you installed to.
You might consider putting these commands into your ~/.bashrc file or someplace
similar such that they are executed every time you log into your machine.


Finally, try it out! Execute

dlhmm -h

This should present you the help information of the program.



Have fun with it!



